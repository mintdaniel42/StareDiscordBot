import java.util.concurrent.TimeUnit

buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath(libs.jcp)
    }
}

plugins {
    id 'java'
    id 'application'
    alias(libs.plugins.buildConfig)
}

apply plugin: "com.igormaznitsa.jcp"

repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
}

dependencies {
    implementation(libs.jda)
    implementation(libs.bundles.jdbc.all)
    implementation(libs.json)
    implementation(libs.slf4j.api)
    implementation(libs.slf4j.simple)
    implementation(libs.avaje.jsonb)
    implementation(libs.avaje.inject)
    implementation(libs.ioutils)
    implementation(libs.wisp)
    implementation(libs.verbalexpressions)
    implementation(libs.doma.core)
    implementation(libs.bucket4j)
    compileOnly(libs.lombok)
    compileOnly(libs.jetbrains.annotations)
    compileOnly(libs.jakarta.inject)
    annotationProcessor(libs.lombok)
    annotationProcessor(libs.doma.processor)
    annotationProcessor(libs.avaje.jsonb.generator)
    annotationProcessor(libs.avaje.inject.generator)
}

group = 'org.mintdaniel42.starediscordbot'
version = '2.3'
application.mainClass = "${project.group}.Bot"

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(22)
    }
}

tasks.preprocess {
    dependsOn generateBuildConfig
    setSources(sourceSets.main.java.srcDirs)

    keepComments = 'remove_jcp_only'
    unknownVarAsFalse = true
    setVars(["dev": System.getenv("DEV") == "1"])
}

tasks.preprocess.outputs.upToDateWhen {
    false
}

tasks.compileJava {
    dependsOn preprocess
    source = preprocess.target
    // TODO: remove when new constructor system is released
    options.compilerArgs += ['-Adoma.domain.converters=org.mintdaniel42.starediscordbot.data.domain.DomainConvertersProvider', '--enable-preview']
}

tasks.jar {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE

    manifest.attributes("Main-Class": application.mainClass)

    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

buildConfig {
    packageName("${project.group}.build")
    forClass(className = "BuildConfig") {
        buildConfigField("java.util.Locale", "locale", "Locale.GERMANY")

        buildConfigField(long, "cleaningInterval", TimeUnit.MINUTES.toMillis(5))
        buildConfigField(long, "maxRequestAge", TimeUnit.DAYS.toMillis(2))
        buildConfigField(long, "maxUsernameAge", TimeUnit.DAYS.toMillis(5))

        buildConfigField(int, "entriesPerPage", 10)

        buildConfigField(boolean, "autoFetch", true)
    }
}